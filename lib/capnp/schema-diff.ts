// This file has been automatically generated by capnp-es.
import * as $ from "capnp-es";
import { Node, Node_Parameter, Node_NestedNode, Node_SourceInfo, Node_SourceInfo_Member, Field, Enumerant, Superclass, Method, Type, Brand, Brand_Scope, Brand_Binding, Value, Annotation, ElementSize, CapnpVersion, CodeGeneratorRequest, CodeGeneratorRequest_RequestedFile, CodeGeneratorRequest_RequestedFile_Import, CodeGeneratorRequest_RequestedFile_FileSourceInfo, CodeGeneratorRequest_RequestedFile_FileSourceInfo_Identifier } from "./schema.ts";
export const _capnpFileId = BigInt("0x8da477514bc0df39");
export const SchemaChange_Breakage = {
  NONE: 0,
  CODE: 1,
  WIRE: 2
} as const;
export type SchemaChange_Breakage = (typeof SchemaChange_Breakage)[keyof typeof SchemaChange_Breakage];
export class SchemaChange_SourceInfo_StartPosition extends $.Struct {
  static readonly _capnp = {
    displayName: "startPosition",
    id: "ebe7d0ff0dbd8692",
    size: new $.ObjectSize(24, 1)
  };
  /**
  * The 1-based line number of the `startByte`.
  * */
  get line(): number {
    return $.utils.getUint32(0, this);
  }
  set line(value: number) {
    $.utils.setUint32(0, value, this);
  }
  /**
  * The 1-based column number of the `startByte`.
  * */
  get column(): number {
    return $.utils.getUint32(4, this);
  }
  set column(value: number) {
    $.utils.setUint32(4, value, this);
  }
  toString(): string {
    return "SchemaChange_SourceInfo_StartPosition_" + super.toString();
  }
}
export class SchemaChange_SourceInfo_EndPosition extends $.Struct {
  static readonly _capnp = {
    displayName: "endPosition",
    id: "8e65f70eea7c8084",
    size: new $.ObjectSize(24, 1)
  };
  /**
  * The 1-based line number of the `endByte`.
  * */
  get line(): number {
    return $.utils.getUint32(8, this);
  }
  set line(value: number) {
    $.utils.setUint32(8, value, this);
  }
  /**
  * The 1-based column number of the `endByte`.
  * */
  get column(): number {
    return $.utils.getUint32(12, this);
  }
  set column(value: number) {
    $.utils.setUint32(12, value, this);
  }
  toString(): string {
    return "SchemaChange_SourceInfo_EndPosition_" + super.toString();
  }
}
/**
* A snippet of the code which can be shown when reporting errors.
* */
export class SchemaChange_SourceInfo_Snippet extends $.Struct {
  static readonly _capnp = {
    displayName: "snippet",
    id: "c0e3685998d7b614",
    size: new $.ObjectSize(24, 1)
  };
  _adoptLines(value: $.Orphan<$.List<string>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownLines(): $.Orphan<$.List<string>> {
    return $.utils.disown(this.lines);
  }
  /**
  * The lines of the snippet surrounding `startPosition`. The first line corresponds to
  * `startLine`, and the last line can be obtained with `startLine + lines.length`.
  * */
  get lines(): $.List<string> {
    return $.utils.getList(0, $.TextList, this);
  }
  _hasLines(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initLines(length: number): $.List<string> {
    return $.utils.initList(0, $.TextList, length, this);
  }
  set lines(value: $.List<string>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  /**
  * The 1-based line number of the first line in the snippet.
  * */
  get startLine(): number {
    return $.utils.getUint32(16, this);
  }
  set startLine(value: number) {
    $.utils.setUint32(16, value, this);
  }
  toString(): string {
    return "SchemaChange_SourceInfo_Snippet_" + super.toString();
  }
}
export class SchemaChange_SourceInfo extends $.Struct {
  static readonly _capnp = {
    displayName: "SourceInfo",
    id: "bd6edc8c3e7d69b2",
    size: new $.ObjectSize(24, 1)
  };
  get startPosition(): SchemaChange_SourceInfo_StartPosition {
    return $.utils.getAs(SchemaChange_SourceInfo_StartPosition, this);
  }
  _initStartPosition(): SchemaChange_SourceInfo_StartPosition {
    return $.utils.getAs(SchemaChange_SourceInfo_StartPosition, this);
  }
  get endPosition(): SchemaChange_SourceInfo_EndPosition {
    return $.utils.getAs(SchemaChange_SourceInfo_EndPosition, this);
  }
  _initEndPosition(): SchemaChange_SourceInfo_EndPosition {
    return $.utils.getAs(SchemaChange_SourceInfo_EndPosition, this);
  }
  /**
  * A snippet of the code which can be shown when reporting errors.
  * */
  get snippet(): SchemaChange_SourceInfo_Snippet {
    return $.utils.getAs(SchemaChange_SourceInfo_Snippet, this);
  }
  _initSnippet(): SchemaChange_SourceInfo_Snippet {
    return $.utils.getAs(SchemaChange_SourceInfo_Snippet, this);
  }
  toString(): string {
    return "SchemaChange_SourceInfo_" + super.toString();
  }
}
export const SchemaChange_NodeRef_Kind = {
  FILE: 0,
  STRUCT: 1,
  ENUM: 2,
  INTERFACE: 3,
  CONST: 4,
  ANNOTATION: 5,
  FIELD: 6,
  ENUMERANT: 7,
  METHOD: 8
} as const;
export type SchemaChange_NodeRef_Kind = (typeof SchemaChange_NodeRef_Kind)[keyof typeof SchemaChange_NodeRef_Kind];
/**
* A reference to a Cap'n Proto node.
* */
export class SchemaChange_NodeRef extends $.Struct {
  static readonly Kind = SchemaChange_NodeRef_Kind;
  static readonly _capnp = {
    displayName: "NodeRef",
    id: "c9631b0d9aceeacb",
    size: new $.ObjectSize(16, 1)
  };
  /**
  * The kind of the node.
  * */
  get kind(): SchemaChange_NodeRef_Kind {
    return $.utils.getUint16(0, this) as SchemaChange_NodeRef_Kind;
  }
  set kind(value: SchemaChange_NodeRef_Kind) {
    $.utils.setUint16(0, value, this);
  }
  /**
  * The identifier of the node.
  *
  * If the node is a member (i.e. a field, enumerant, or method), this is the identifier of its
  * parent node (i.e. struct, enum, or interface), and the ordinal of the member is available in
  * `ordinal`.
  *
  * When referring to a node whose ID changed, this corresponds to the _new_ ID.
  * */
  get id(): bigint {
    return $.utils.getUint64(8, this);
  }
  set id(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  /**
  * If the node is a member, this is its identifier within its parent.
  * */
  get ordinal(): number {
    return $.utils.getUint16(2, this);
  }
  set ordinal(value: number) {
    $.utils.setUint16(2, value, this);
  }
  /**
  * The "short" name of the node, e.g. for a field, its name.
  *
  * To obtain the qualified name of the node (e.g. for a field, the name of its containing type
  * followed by the name of the field), use `id` and build up the full name of the resolved node.
  *
  * When referring to a node whose name changed, this corresponds to the _new_ name.
  * */
  get shortName(): string {
    return $.utils.getText(0, this);
  }
  set shortName(value: string) {
    $.utils.setText(0, value, this);
  }
  toString(): string {
    return "SchemaChange_NodeRef_" + super.toString();
  }
}
export const SchemaChange_TypedNodeRef_Kind = {
  CONST: 0,
  ANNOTATION: 1,
  FIELD: 2,
  METHOD_INPUT: 3,
  METHOD_OUTPUT: 4
} as const;
export type SchemaChange_TypedNodeRef_Kind = (typeof SchemaChange_TypedNodeRef_Kind)[keyof typeof SchemaChange_TypedNodeRef_Kind];
/**
* A reference to a Cap'n Proto node which is typed.
* */
export class SchemaChange_TypedNodeRef extends $.Struct {
  static readonly Kind = SchemaChange_TypedNodeRef_Kind;
  static readonly _capnp = {
    displayName: "TypedNodeRef",
    id: "875441ea32c84fd3",
    size: new $.ObjectSize(16, 1)
  };
  get kind(): SchemaChange_TypedNodeRef_Kind {
    return $.utils.getUint16(0, this) as SchemaChange_TypedNodeRef_Kind;
  }
  set kind(value: SchemaChange_TypedNodeRef_Kind) {
    $.utils.setUint16(0, value, this);
  }
  /**
  * See `NodeRef.id`.
  * */
  get id(): bigint {
    return $.utils.getUint64(8, this);
  }
  set id(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  /**
  * See `NodeRef.parentId`.
  * */
  get ordinal(): number {
    return $.utils.getUint16(2, this);
  }
  set ordinal(value: number) {
    $.utils.setUint16(2, value, this);
  }
  /**
  * See `NodeRef.shortName`.
  * */
  get shortName(): string {
    return $.utils.getText(0, this);
  }
  set shortName(value: string) {
    $.utils.setText(0, value, this);
  }
  toString(): string {
    return "SchemaChange_TypedNodeRef_" + super.toString();
  }
}
export const SchemaChange_AnnotationTarget = {
  FILE: 0,
  CONST: 1,
  ENUM: 2,
  ENUMERANT: 3,
  STRUCT: 4,
  FIELD: 5,
  UNION: 6,
  GROUP: 7,
  INTERFACE: 8,
  METHOD: 9,
  PARAM: 10,
  ANNOTATION: 11
} as const;
export type SchemaChange_AnnotationTarget = (typeof SchemaChange_AnnotationTarget)[keyof typeof SchemaChange_AnnotationTarget];
/**
* An unsupported syntax node was used, which prevents further analysis.
*
* The exact breakage is unknown because the syntax node is not supported, so to be
* conservative we use the highest level.
* */
export class SchemaChange_Unsupported extends $.Struct {
  static readonly _capnp = {
    displayName: "unsupported",
    id: "cd6154db0d896b0b",
    size: new $.ObjectSize(32, 4)
  };
  _adoptNode(value: $.Orphan<SchemaChange_NodeRef>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownNode(): $.Orphan<SchemaChange_NodeRef> {
    return $.utils.disown(this.node);
  }
  get node(): SchemaChange_NodeRef {
    return $.utils.getStruct(1, SchemaChange_NodeRef, this);
  }
  _hasNode(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initNode(): SchemaChange_NodeRef {
    return $.utils.initStructAt(1, SchemaChange_NodeRef, this);
  }
  set node(value: SchemaChange_NodeRef) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  get reason(): string {
    return $.utils.getText(2, this);
  }
  set reason(value: string) {
    $.utils.setText(2, value, this);
  }
  toString(): string {
    return "SchemaChange_Unsupported_" + super.toString();
  }
}
/**
* A node (e.g. struct) was added.
* */
export class SchemaChange_NodeAdded extends $.Struct {
  static readonly _capnp = {
    displayName: "nodeAdded",
    id: "d35092cf4a16aa0b",
    size: new $.ObjectSize(32, 4)
  };
  _adoptAddedNode(value: $.Orphan<SchemaChange_NodeRef>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownAddedNode(): $.Orphan<SchemaChange_NodeRef> {
    return $.utils.disown(this.addedNode);
  }
  get addedNode(): SchemaChange_NodeRef {
    return $.utils.getStruct(1, SchemaChange_NodeRef, this);
  }
  _hasAddedNode(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initAddedNode(): SchemaChange_NodeRef {
    return $.utils.initStructAt(1, SchemaChange_NodeRef, this);
  }
  set addedNode(value: SchemaChange_NodeRef) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string {
    return "SchemaChange_NodeAdded_" + super.toString();
  }
}
/**
* A node (e.g. struct) was removed.
*
* For non-member nodes (e.g. structs), this is considered a source breaking change only
* because the schema still compiles, which implies that the node was not used or its usages
* were replaced with compatible types (e.g. enum -> `UInt16`) or incompatible types (in which
* case another error will be emitted at usage sites).
*
* For member nodes (e.g. fields), this is considered a wire breaking change because another
* incompatible member may be added again with the same ordinal in the future.
* */
export class SchemaChange_NodeRemoved extends $.Struct {
  static readonly _capnp = {
    displayName: "nodeRemoved",
    id: "bfcdc625d7e561e0",
    size: new $.ObjectSize(32, 4)
  };
  _adoptRemovedNode(value: $.Orphan<SchemaChange_NodeRef>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownRemovedNode(): $.Orphan<SchemaChange_NodeRef> {
    return $.utils.disown(this.removedNode);
  }
  get removedNode(): SchemaChange_NodeRef {
    return $.utils.getStruct(1, SchemaChange_NodeRef, this);
  }
  _hasRemovedNode(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initRemovedNode(): SchemaChange_NodeRef {
    return $.utils.initStructAt(1, SchemaChange_NodeRef, this);
  }
  set removedNode(value: SchemaChange_NodeRef) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string {
    return "SchemaChange_NodeRemoved_" + super.toString();
  }
}
/**
* A node (e.g. struct) was renamed, but its ID stayed the same.
* */
export class SchemaChange_NodeRenamed extends $.Struct {
  static readonly _capnp = {
    displayName: "nodeRenamed",
    id: "bd60b19988820da6",
    size: new $.ObjectSize(32, 4)
  };
  _adoptRenamedNode(value: $.Orphan<SchemaChange_NodeRef>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownRenamedNode(): $.Orphan<SchemaChange_NodeRef> {
    return $.utils.disown(this.renamedNode);
  }
  get renamedNode(): SchemaChange_NodeRef {
    return $.utils.getStruct(1, SchemaChange_NodeRef, this);
  }
  _hasRenamedNode(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initRenamedNode(): SchemaChange_NodeRef {
    return $.utils.initStructAt(1, SchemaChange_NodeRef, this);
  }
  set renamedNode(value: SchemaChange_NodeRef) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  get oldName(): string {
    return $.utils.getText(2, this);
  }
  set oldName(value: string) {
    $.utils.setText(2, value, this);
  }
  toString(): string {
    return "SchemaChange_NodeRenamed_" + super.toString();
  }
}
/**
* A node (e.g. struct) had its ID changed.
*
* Because the ID changed, the node is actually a completely different node. We however try to
* detect when only the ID changes (but the identifier / scope remains the same) to produce
* friendlier error messages.
* */
export class SchemaChange_NodeIdChanged extends $.Struct {
  static readonly _capnp = {
    displayName: "nodeIdChanged",
    id: "e3f580eb6d9b5660",
    size: new $.ObjectSize(32, 4)
  };
  _adoptChangedNode(value: $.Orphan<SchemaChange_NodeRef>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownChangedNode(): $.Orphan<SchemaChange_NodeRef> {
    return $.utils.disown(this.changedNode);
  }
  get changedNode(): SchemaChange_NodeRef {
    return $.utils.getStruct(1, SchemaChange_NodeRef, this);
  }
  _hasChangedNode(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initChangedNode(): SchemaChange_NodeRef {
    return $.utils.initStructAt(1, SchemaChange_NodeRef, this);
  }
  set changedNode(value: SchemaChange_NodeRef) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  get oldId(): bigint {
    return $.utils.getUint64(24, this);
  }
  set oldId(value: bigint) {
    $.utils.setUint64(24, value, this);
  }
  toString(): string {
    return "SchemaChange_NodeIdChanged_" + super.toString();
  }
}
/**
* A member (e.g. field) had its ordinal changed.
* */
export class SchemaChange_MemberOrdinalChanged extends $.Struct {
  static readonly _capnp = {
    displayName: "memberOrdinalChanged",
    id: "8d8403f591dbbf8a",
    size: new $.ObjectSize(32, 4)
  };
  _adoptChangedMember(value: $.Orphan<SchemaChange_NodeRef>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownChangedMember(): $.Orphan<SchemaChange_NodeRef> {
    return $.utils.disown(this.changedMember);
  }
  get changedMember(): SchemaChange_NodeRef {
    return $.utils.getStruct(1, SchemaChange_NodeRef, this);
  }
  _hasChangedMember(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initChangedMember(): SchemaChange_NodeRef {
    return $.utils.initStructAt(1, SchemaChange_NodeRef, this);
  }
  set changedMember(value: SchemaChange_NodeRef) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  get oldOrdinal(): number {
    return $.utils.getUint16(20, this);
  }
  set oldOrdinal(value: number) {
    $.utils.setUint16(20, value, this);
  }
  toString(): string {
    return "SchemaChange_MemberOrdinalChanged_" + super.toString();
  }
}
/**
* A node's type (e.g. field or method return type) changed.
* */
export class SchemaChange_NodeTypeChanged extends $.Struct {
  static readonly _capnp = {
    displayName: "nodeTypeChanged",
    id: "d3f4180be648d183",
    size: new $.ObjectSize(32, 4)
  };
  _adoptChangedNode(value: $.Orphan<SchemaChange_TypedNodeRef>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownChangedNode(): $.Orphan<SchemaChange_TypedNodeRef> {
    return $.utils.disown(this.changedNode);
  }
  get changedNode(): SchemaChange_TypedNodeRef {
    return $.utils.getStruct(1, SchemaChange_TypedNodeRef, this);
  }
  _hasChangedNode(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initChangedNode(): SchemaChange_TypedNodeRef {
    return $.utils.initStructAt(1, SchemaChange_TypedNodeRef, this);
  }
  set changedNode(value: SchemaChange_TypedNodeRef) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptNewType(value: $.Orphan<Type>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownNewType(): $.Orphan<Type> {
    return $.utils.disown(this.newType);
  }
  get newType(): Type {
    return $.utils.getStruct(2, Type, this);
  }
  _hasNewType(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initNewType(): Type {
    return $.utils.initStructAt(2, Type, this);
  }
  set newType(value: Type) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptOldType(value: $.Orphan<Type>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownOldType(): $.Orphan<Type> {
    return $.utils.disown(this.oldType);
  }
  get oldType(): Type {
    return $.utils.getStruct(3, Type, this);
  }
  _hasOldType(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initOldType(): Type {
    return $.utils.initStructAt(3, Type, this);
  }
  set oldType(value: Type) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  toString(): string {
    return "SchemaChange_NodeTypeChanged_" + super.toString();
  }
}
/**
* The default value of a field changed.
* */
export class SchemaChange_FieldDefaultValueChanged extends $.Struct {
  static readonly _capnp = {
    displayName: "fieldDefaultValueChanged",
    id: "c49f61ad32bef5e9",
    size: new $.ObjectSize(32, 4)
  };
  _adoptChangedNode(value: $.Orphan<SchemaChange_NodeRef>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownChangedNode(): $.Orphan<SchemaChange_NodeRef> {
    return $.utils.disown(this.changedNode);
  }
  get changedNode(): SchemaChange_NodeRef {
    return $.utils.getStruct(1, SchemaChange_NodeRef, this);
  }
  _hasChangedNode(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initChangedNode(): SchemaChange_NodeRef {
    return $.utils.initStructAt(1, SchemaChange_NodeRef, this);
  }
  set changedNode(value: SchemaChange_NodeRef) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string {
    return "SchemaChange_FieldDefaultValueChanged_" + super.toString();
  }
}
/**
* The value of a const changed.
* */
export class SchemaChange_ConstValueChanged extends $.Struct {
  static readonly _capnp = {
    displayName: "constValueChanged",
    id: "e953d50d72e5568c",
    size: new $.ObjectSize(32, 4)
  };
  _adoptChangedNode(value: $.Orphan<SchemaChange_NodeRef>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownChangedNode(): $.Orphan<SchemaChange_NodeRef> {
    return $.utils.disown(this.changedNode);
  }
  get changedNode(): SchemaChange_NodeRef {
    return $.utils.getStruct(1, SchemaChange_NodeRef, this);
  }
  _hasChangedNode(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initChangedNode(): SchemaChange_NodeRef {
    return $.utils.initStructAt(1, SchemaChange_NodeRef, this);
  }
  set changedNode(value: SchemaChange_NodeRef) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  _adoptNewValue(value: $.Orphan<Value>): void {
    $.utils.adopt(value, $.utils.getPointer(2, this));
  }
  _disownNewValue(): $.Orphan<Value> {
    return $.utils.disown(this.newValue);
  }
  get newValue(): Value {
    return $.utils.getStruct(2, Value, this);
  }
  _hasNewValue(): boolean {
    return !$.utils.isNull($.utils.getPointer(2, this));
  }
  _initNewValue(): Value {
    return $.utils.initStructAt(2, Value, this);
  }
  set newValue(value: Value) {
    $.utils.copyFrom(value, $.utils.getPointer(2, this));
  }
  _adoptOldValue(value: $.Orphan<Value>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownOldValue(): $.Orphan<Value> {
    return $.utils.disown(this.oldValue);
  }
  get oldValue(): Value {
    return $.utils.getStruct(3, Value, this);
  }
  _hasOldValue(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initOldValue(): Value {
    return $.utils.initStructAt(3, Value, this);
  }
  set oldValue(value: Value) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  toString(): string {
    return "SchemaChange_ConstValueChanged_" + super.toString();
  }
}
export class SchemaChange_AnnotationTargetAdded_Annotation extends $.Struct {
  static readonly _capnp = {
    displayName: "annotation",
    id: "d4c3d6d745ddae6b",
    size: new $.ObjectSize(32, 4)
  };
  get id(): bigint {
    return $.utils.getUint64(24, this);
  }
  set id(value: bigint) {
    $.utils.setUint64(24, value, this);
  }
  get shortName(): string {
    return $.utils.getText(1, this);
  }
  set shortName(value: string) {
    $.utils.setText(1, value, this);
  }
  toString(): string {
    return "SchemaChange_AnnotationTargetAdded_Annotation_" + super.toString();
  }
}
/**
* An annotation target was added.
* */
export class SchemaChange_AnnotationTargetAdded extends $.Struct {
  static readonly _capnp = {
    displayName: "annotationTargetAdded",
    id: "db2710804813d02f",
    size: new $.ObjectSize(32, 4)
  };
  get annotation(): SchemaChange_AnnotationTargetAdded_Annotation {
    return $.utils.getAs(SchemaChange_AnnotationTargetAdded_Annotation, this);
  }
  _initAnnotation(): SchemaChange_AnnotationTargetAdded_Annotation {
    return $.utils.getAs(SchemaChange_AnnotationTargetAdded_Annotation, this);
  }
  get addedTarget(): SchemaChange_AnnotationTarget {
    return $.utils.getUint16(20, this) as SchemaChange_AnnotationTarget;
  }
  set addedTarget(value: SchemaChange_AnnotationTarget) {
    $.utils.setUint16(20, value, this);
  }
  toString(): string {
    return "SchemaChange_AnnotationTargetAdded_" + super.toString();
  }
}
export class SchemaChange_AnnotationTargetRemoved_Annotation extends $.Struct {
  static readonly _capnp = {
    displayName: "annotation",
    id: "e3aa2d07e9eff870",
    size: new $.ObjectSize(32, 4)
  };
  get id(): bigint {
    return $.utils.getUint64(24, this);
  }
  set id(value: bigint) {
    $.utils.setUint64(24, value, this);
  }
  get shortName(): string {
    return $.utils.getText(1, this);
  }
  set shortName(value: string) {
    $.utils.setText(1, value, this);
  }
  toString(): string {
    return "SchemaChange_AnnotationTargetRemoved_Annotation_" + super.toString();
  }
}
/**
* An annotation target was removed. Existing code using this annotation may no longer be valid.
* */
export class SchemaChange_AnnotationTargetRemoved extends $.Struct {
  static readonly _capnp = {
    displayName: "annotationTargetRemoved",
    id: "b59950ae69a6c98c",
    size: new $.ObjectSize(32, 4)
  };
  get annotation(): SchemaChange_AnnotationTargetRemoved_Annotation {
    return $.utils.getAs(SchemaChange_AnnotationTargetRemoved_Annotation, this);
  }
  _initAnnotation(): SchemaChange_AnnotationTargetRemoved_Annotation {
    return $.utils.getAs(SchemaChange_AnnotationTargetRemoved_Annotation, this);
  }
  get removedTarget(): SchemaChange_AnnotationTarget {
    return $.utils.getUint16(20, this) as SchemaChange_AnnotationTarget;
  }
  set removedTarget(value: SchemaChange_AnnotationTarget) {
    $.utils.setUint16(20, value, this);
  }
  toString(): string {
    return "SchemaChange_AnnotationTargetRemoved_" + super.toString();
  }
}
export const SchemaChange_Which = {
  UNSUPPORTED: 0,
  NODE_ADDED: 1,
  NODE_REMOVED: 2,
  NODE_RENAMED: 3,
  NODE_ID_CHANGED: 4,
  MEMBER_ORDINAL_CHANGED: 10,
  NODE_TYPE_CHANGED: 5,
  FIELD_DEFAULT_VALUE_CHANGED: 6,
  CONST_VALUE_CHANGED: 7,
  ANNOTATION_TARGET_ADDED: 8,
  ANNOTATION_TARGET_REMOVED: 9
} as const;
export type SchemaChange_Which = (typeof SchemaChange_Which)[keyof typeof SchemaChange_Which];
/**
* Describes a change between two schemas.
*
* Note that source-only changes (e.g. fields being reordered or comments changing) are not
* considered "changes".
* */
export class SchemaChange extends $.Struct {
  static readonly UNSUPPORTED = SchemaChange_Which.UNSUPPORTED;
  static readonly NODE_ADDED = SchemaChange_Which.NODE_ADDED;
  static readonly NODE_REMOVED = SchemaChange_Which.NODE_REMOVED;
  static readonly NODE_RENAMED = SchemaChange_Which.NODE_RENAMED;
  static readonly NODE_ID_CHANGED = SchemaChange_Which.NODE_ID_CHANGED;
  static readonly MEMBER_ORDINAL_CHANGED = SchemaChange_Which.MEMBER_ORDINAL_CHANGED;
  static readonly NODE_TYPE_CHANGED = SchemaChange_Which.NODE_TYPE_CHANGED;
  static readonly FIELD_DEFAULT_VALUE_CHANGED = SchemaChange_Which.FIELD_DEFAULT_VALUE_CHANGED;
  static readonly CONST_VALUE_CHANGED = SchemaChange_Which.CONST_VALUE_CHANGED;
  static readonly ANNOTATION_TARGET_ADDED = SchemaChange_Which.ANNOTATION_TARGET_ADDED;
  static readonly ANNOTATION_TARGET_REMOVED = SchemaChange_Which.ANNOTATION_TARGET_REMOVED;
  static readonly Breakage = SchemaChange_Breakage;
  static readonly SourceInfo = SchemaChange_SourceInfo;
  static readonly NodeRef = SchemaChange_NodeRef;
  static readonly TypedNodeRef = SchemaChange_TypedNodeRef;
  static readonly AnnotationTarget = SchemaChange_AnnotationTarget;
  static readonly _capnp = {
    displayName: "SchemaChange",
    id: "f73bd9b248983d61",
    size: new $.ObjectSize(32, 4)
  };
  get breakage(): SchemaChange_Breakage {
    return $.utils.getUint16(0, this) as SchemaChange_Breakage;
  }
  set breakage(value: SchemaChange_Breakage) {
    $.utils.setUint16(0, value, this);
  }
  /**
  * The identifier of the file where the change occurred. Use `SchemaDiff.files` to resolve the
  * name of the file.
  * */
  get unsupported(): SchemaChange_Unsupported {
    $.utils.testWhich("unsupported", $.utils.getUint16(2, this), 0, this);
    return $.utils.getAs(SchemaChange_Unsupported, this);
  }
  _initUnsupported(): SchemaChange_Unsupported {
    $.utils.setUint16(2, 0, this);
    return $.utils.getAs(SchemaChange_Unsupported, this);
  }
  get _isUnsupported(): boolean {
    return $.utils.getUint16(2, this) === 0;
  }
  set unsupported(_: true) {
    $.utils.setUint16(2, 0, this);
  }
  /**
  * The position in the original schema where the change starts.
  * */
  get nodeAdded(): SchemaChange_NodeAdded {
    $.utils.testWhich("nodeAdded", $.utils.getUint16(2, this), 1, this);
    return $.utils.getAs(SchemaChange_NodeAdded, this);
  }
  _initNodeAdded(): SchemaChange_NodeAdded {
    $.utils.setUint16(2, 1, this);
    return $.utils.getAs(SchemaChange_NodeAdded, this);
  }
  get _isNodeAdded(): boolean {
    return $.utils.getUint16(2, this) === 1;
  }
  set nodeAdded(_: true) {
    $.utils.setUint16(2, 1, this);
  }
  /**
  * The position in the original schema where the change ends.
  * */
  get nodeRemoved(): SchemaChange_NodeRemoved {
    $.utils.testWhich("nodeRemoved", $.utils.getUint16(2, this), 2, this);
    return $.utils.getAs(SchemaChange_NodeRemoved, this);
  }
  _initNodeRemoved(): SchemaChange_NodeRemoved {
    $.utils.setUint16(2, 2, this);
    return $.utils.getAs(SchemaChange_NodeRemoved, this);
  }
  get _isNodeRemoved(): boolean {
    return $.utils.getUint16(2, this) === 2;
  }
  set nodeRemoved(_: true) {
    $.utils.setUint16(2, 2, this);
  }
  /**
  * The source information of the change, if requested and `fileId` can be read.
  *
  * The location corresponds to the position of the "main" node referred by the change in its new
  * file, except for deletions in which case the change is located in the old file (as there exists
  * no corresponding location in the new file).
  * */
  get nodeRenamed(): SchemaChange_NodeRenamed {
    $.utils.testWhich("nodeRenamed", $.utils.getUint16(2, this), 3, this);
    return $.utils.getAs(SchemaChange_NodeRenamed, this);
  }
  _initNodeRenamed(): SchemaChange_NodeRenamed {
    $.utils.setUint16(2, 3, this);
    return $.utils.getAs(SchemaChange_NodeRenamed, this);
  }
  get _isNodeRenamed(): boolean {
    return $.utils.getUint16(2, this) === 3;
  }
  set nodeRenamed(_: true) {
    $.utils.setUint16(2, 3, this);
  }
  /**
  * An unsupported syntax node was used, which prevents further analysis.
  *
  * The exact breakage is unknown because the syntax node is not supported, so to be
  * conservative we use the highest level.
  * */
  get nodeIdChanged(): SchemaChange_NodeIdChanged {
    $.utils.testWhich("nodeIdChanged", $.utils.getUint16(2, this), 4, this);
    return $.utils.getAs(SchemaChange_NodeIdChanged, this);
  }
  _initNodeIdChanged(): SchemaChange_NodeIdChanged {
    $.utils.setUint16(2, 4, this);
    return $.utils.getAs(SchemaChange_NodeIdChanged, this);
  }
  get _isNodeIdChanged(): boolean {
    return $.utils.getUint16(2, this) === 4;
  }
  set nodeIdChanged(_: true) {
    $.utils.setUint16(2, 4, this);
  }
  /**
  * A node (e.g. struct) was added.
  * */
  get memberOrdinalChanged(): SchemaChange_MemberOrdinalChanged {
    $.utils.testWhich("memberOrdinalChanged", $.utils.getUint16(2, this), 10, this);
    return $.utils.getAs(SchemaChange_MemberOrdinalChanged, this);
  }
  _initMemberOrdinalChanged(): SchemaChange_MemberOrdinalChanged {
    $.utils.setUint16(2, 10, this);
    return $.utils.getAs(SchemaChange_MemberOrdinalChanged, this);
  }
  get _isMemberOrdinalChanged(): boolean {
    return $.utils.getUint16(2, this) === 10;
  }
  set memberOrdinalChanged(_: true) {
    $.utils.setUint16(2, 10, this);
  }
  /**
  * A node (e.g. struct) was removed.
  *
  * For non-member nodes (e.g. structs), this is considered a source breaking change only
  * because the schema still compiles, which implies that the node was not used or its usages
  * were replaced with compatible types (e.g. enum -> `UInt16`) or incompatible types (in which
  * case another error will be emitted at usage sites).
  *
  * For member nodes (e.g. fields), this is considered a wire breaking change because another
  * incompatible member may be added again with the same ordinal in the future.
  * */
  get nodeTypeChanged(): SchemaChange_NodeTypeChanged {
    $.utils.testWhich("nodeTypeChanged", $.utils.getUint16(2, this), 5, this);
    return $.utils.getAs(SchemaChange_NodeTypeChanged, this);
  }
  _initNodeTypeChanged(): SchemaChange_NodeTypeChanged {
    $.utils.setUint16(2, 5, this);
    return $.utils.getAs(SchemaChange_NodeTypeChanged, this);
  }
  get _isNodeTypeChanged(): boolean {
    return $.utils.getUint16(2, this) === 5;
  }
  set nodeTypeChanged(_: true) {
    $.utils.setUint16(2, 5, this);
  }
  /**
  * A node (e.g. struct) was renamed, but its ID stayed the same.
  * */
  get fieldDefaultValueChanged(): SchemaChange_FieldDefaultValueChanged {
    $.utils.testWhich("fieldDefaultValueChanged", $.utils.getUint16(2, this), 6, this);
    return $.utils.getAs(SchemaChange_FieldDefaultValueChanged, this);
  }
  _initFieldDefaultValueChanged(): SchemaChange_FieldDefaultValueChanged {
    $.utils.setUint16(2, 6, this);
    return $.utils.getAs(SchemaChange_FieldDefaultValueChanged, this);
  }
  get _isFieldDefaultValueChanged(): boolean {
    return $.utils.getUint16(2, this) === 6;
  }
  set fieldDefaultValueChanged(_: true) {
    $.utils.setUint16(2, 6, this);
  }
  /**
  * A node (e.g. struct) had its ID changed.
  *
  * Because the ID changed, the node is actually a completely different node. We however try to
  * detect when only the ID changes (but the identifier / scope remains the same) to produce
  * friendlier error messages.
  * */
  get constValueChanged(): SchemaChange_ConstValueChanged {
    $.utils.testWhich("constValueChanged", $.utils.getUint16(2, this), 7, this);
    return $.utils.getAs(SchemaChange_ConstValueChanged, this);
  }
  _initConstValueChanged(): SchemaChange_ConstValueChanged {
    $.utils.setUint16(2, 7, this);
    return $.utils.getAs(SchemaChange_ConstValueChanged, this);
  }
  get _isConstValueChanged(): boolean {
    return $.utils.getUint16(2, this) === 7;
  }
  set constValueChanged(_: true) {
    $.utils.setUint16(2, 7, this);
  }
  /**
  * A node's type (e.g. field or method return type) changed.
  * */
  get annotationTargetAdded(): SchemaChange_AnnotationTargetAdded {
    $.utils.testWhich("annotationTargetAdded", $.utils.getUint16(2, this), 8, this);
    return $.utils.getAs(SchemaChange_AnnotationTargetAdded, this);
  }
  _initAnnotationTargetAdded(): SchemaChange_AnnotationTargetAdded {
    $.utils.setUint16(2, 8, this);
    return $.utils.getAs(SchemaChange_AnnotationTargetAdded, this);
  }
  get _isAnnotationTargetAdded(): boolean {
    return $.utils.getUint16(2, this) === 8;
  }
  set annotationTargetAdded(_: true) {
    $.utils.setUint16(2, 8, this);
  }
  /**
  * The default value of a field changed.
  * */
  get annotationTargetRemoved(): SchemaChange_AnnotationTargetRemoved {
    $.utils.testWhich("annotationTargetRemoved", $.utils.getUint16(2, this), 9, this);
    return $.utils.getAs(SchemaChange_AnnotationTargetRemoved, this);
  }
  _initAnnotationTargetRemoved(): SchemaChange_AnnotationTargetRemoved {
    $.utils.setUint16(2, 9, this);
    return $.utils.getAs(SchemaChange_AnnotationTargetRemoved, this);
  }
  get _isAnnotationTargetRemoved(): boolean {
    return $.utils.getUint16(2, this) === 9;
  }
  set annotationTargetRemoved(_: true) {
    $.utils.setUint16(2, 9, this);
  }
  /**
  * The value of a const changed.
  * */
  get fileId(): bigint {
    return $.utils.getUint64(8, this);
  }
  set fileId(value: bigint) {
    $.utils.setUint64(8, value, this);
  }
  /**
  * An annotation target was added.
  * */
  get startByte(): number {
    return $.utils.getUint32(4, this);
  }
  set startByte(value: number) {
    $.utils.setUint32(4, value, this);
  }
  /**
  * An annotation target was removed. Existing code using this annotation may no longer be valid.
  * */
  get endByte(): number {
    return $.utils.getUint32(16, this);
  }
  set endByte(value: number) {
    $.utils.setUint32(16, value, this);
  }
  _adoptSourceInfo(value: $.Orphan<SchemaChange_SourceInfo>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownSourceInfo(): $.Orphan<SchemaChange_SourceInfo> {
    return $.utils.disown(this.sourceInfo);
  }
  /**
  * A member (e.g. field) had its ordinal changed.
  * */
  get sourceInfo(): SchemaChange_SourceInfo {
    return $.utils.getStruct(0, SchemaChange_SourceInfo, this);
  }
  _hasSourceInfo(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initSourceInfo(): SchemaChange_SourceInfo {
    return $.utils.initStructAt(0, SchemaChange_SourceInfo, this);
  }
  set sourceInfo(value: SchemaChange_SourceInfo) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string {
    return "SchemaChange_" + super.toString();
  }
  which(): SchemaChange_Which {
    return $.utils.getUint16(2, this) as SchemaChange_Which;
  }
}
export class SchemaDiff_File extends $.Struct {
  static readonly _capnp = {
    displayName: "File",
    id: "a30e6f80699c995d",
    size: new $.ObjectSize(8, 1)
  };
  /**
  * The identifier of the file (as given by `SchemaChange.fileId`).
  * */
  get id(): bigint {
    return $.utils.getUint64(0, this);
  }
  set id(value: bigint) {
    $.utils.setUint64(0, value, this);
  }
  /**
  * The path of the file. This corresponds to the _new_ file path, except for removals in which
  * case this is the _old_ file path.
  * */
  get path(): string {
    return $.utils.getText(0, this);
  }
  set path(value: string) {
    $.utils.setText(0, value, this);
  }
  toString(): string {
    return "SchemaDiff_File_" + super.toString();
  }
}
/**
* The difference between two schemas.
* */
export class SchemaDiff extends $.Struct {
  static readonly File = SchemaDiff_File;
  static readonly _capnp = {
    displayName: "SchemaDiff",
    id: "ecbc1691456b2b2f",
    size: new $.ObjectSize(0, 2)
  };
  static _Changes: $.ListCtor<SchemaChange>;
  static _Files: $.ListCtor<SchemaDiff_File>;
  _adoptChanges(value: $.Orphan<$.List<SchemaChange>>): void {
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownChanges(): $.Orphan<$.List<SchemaChange>> {
    return $.utils.disown(this.changes);
  }
  /**
  * The list of changes which occurred.
  * */
  get changes(): $.List<SchemaChange> {
    return $.utils.getList(0, SchemaDiff._Changes, this);
  }
  _hasChanges(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initChanges(length: number): $.List<SchemaChange> {
    return $.utils.initList(0, SchemaDiff._Changes, length, this);
  }
  set changes(value: $.List<SchemaChange>) {
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  _adoptFiles(value: $.Orphan<$.List<SchemaDiff_File>>): void {
    $.utils.adopt(value, $.utils.getPointer(1, this));
  }
  _disownFiles(): $.Orphan<$.List<SchemaDiff_File>> {
    return $.utils.disown(this.files);
  }
  /**
  * Information about the files which appear in `changes`.
  * */
  get files(): $.List<SchemaDiff_File> {
    return $.utils.getList(1, SchemaDiff._Files, this);
  }
  _hasFiles(): boolean {
    return !$.utils.isNull($.utils.getPointer(1, this));
  }
  _initFiles(length: number): $.List<SchemaDiff_File> {
    return $.utils.initList(1, SchemaDiff._Files, length, this);
  }
  set files(value: $.List<SchemaDiff_File>) {
    $.utils.copyFrom(value, $.utils.getPointer(1, this));
  }
  toString(): string {
    return "SchemaDiff_" + super.toString();
  }
}
export const BreakageAnnotation_Which = {
  ALWAYS: 0,
  ONE_OF: 1
} as const;
export type BreakageAnnotation_Which = (typeof BreakageAnnotation_Which)[keyof typeof BreakageAnnotation_Which];
export class BreakageAnnotation extends $.Struct {
  static readonly ALWAYS = BreakageAnnotation_Which.ALWAYS;
  static readonly ONE_OF = BreakageAnnotation_Which.ONE_OF;
  static readonly _capnp = {
    displayName: "BreakageAnnotation",
    id: "dff01ce3ef6537b4",
    size: new $.ObjectSize(8, 1)
  };
  /**
  * This change always leads to the same breakage.
  * */
  get always(): SchemaChange_Breakage {
    $.utils.testWhich("always", $.utils.getUint16(2, this), 0, this);
    return $.utils.getUint16(0, this) as SchemaChange_Breakage;
  }
  get _isAlways(): boolean {
    return $.utils.getUint16(2, this) === 0;
  }
  set always(value: SchemaChange_Breakage) {
    $.utils.setUint16(2, 0, this);
    $.utils.setUint16(0, value, this);
  }
  _adoptOneOf(value: $.Orphan<$.List<SchemaChange_Breakage>>): void {
    $.utils.setUint16(2, 1, this);
    $.utils.adopt(value, $.utils.getPointer(0, this));
  }
  _disownOneOf(): $.Orphan<$.List<SchemaChange_Breakage>> {
    return $.utils.disown(this.oneOf);
  }
  /**
  * This change can lead to one of the breakages in the list.
  * */
  get oneOf(): $.List<SchemaChange_Breakage> {
    $.utils.testWhich("oneOf", $.utils.getUint16(2, this), 1, this);
    return $.utils.getList(0, $.Uint16List, this) as $.List<SchemaChange_Breakage>;
  }
  _hasOneOf(): boolean {
    return !$.utils.isNull($.utils.getPointer(0, this));
  }
  _initOneOf(length: number): $.List<SchemaChange_Breakage> {
    $.utils.setUint16(2, 1, this);
    return $.utils.initList(0, $.Uint16List, length, this) as $.List<SchemaChange_Breakage>;
  }
  get _isOneOf(): boolean {
    return $.utils.getUint16(2, this) === 1;
  }
  set oneOf(value: $.List<SchemaChange_Breakage>) {
    $.utils.setUint16(2, 1, this);
    $.utils.copyFrom(value, $.utils.getPointer(0, this));
  }
  toString(): string {
    return "BreakageAnnotation_" + super.toString();
  }
  which(): BreakageAnnotation_Which {
    return $.utils.getUint16(2, this) as BreakageAnnotation_Which;
  }
}
SchemaDiff._Changes = $.CompositeList(SchemaChange);
SchemaDiff._Files = $.CompositeList(SchemaDiff_File);
